<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ctf on ngc7293&#39;s blog</title>
    <link>http://ngc7.cn/tags/ctf/</link>
    <description>Recent content in Ctf on ngc7293&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 26 Feb 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://ngc7.cn/tags/ctf/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>jinja模版注入</title>
      <link>http://ngc7.cn/posts/jinja/</link>
      <pubDate>Mon, 26 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>http://ngc7.cn/posts/jinja/</guid>
      <description>jinja模版注入入门 放假前几天在写我自己的一个django项目，了解了一下这方面的漏洞，正好在这里做个笔记
首先先推荐两篇写的不错的博客
(探索Flask/Jinja2中的服务端模版注入（一）)[http://www.freebuf.com/articles/web/98619.html]
(探索Flask/Jinja2中的服务端模版注入（二）)[http://www.freebuf.com/articles/web/98928.html]
首先我们来写一个poc.py来介绍一下这个漏洞
因为django有点庞大冗杂，咱们来用flask来复现漏洞
from flask import * app = Flask(__name__) @app.route(&#39;/&amp;lt;name&amp;gt;&#39;) def hello(name): templates = &#39;&#39;&#39; &amp;lt;div&amp;gt;%s&amp;lt;/div&amp;gt; &#39;&#39;&#39;%name return render_template_string(templates) if __name__ == &amp;quot;__main__&amp;quot;: app.run()  这是一个简单的demo，作用就是将传入的name字符串经过模版渲染打印在网页上
当我们传入{{ 2+2 }}时，你会发现我们的输入变成4，</description>
    </item>
    
  </channel>
</rss>